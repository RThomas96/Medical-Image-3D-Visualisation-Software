#version 400 core

in vec4 vPos_WS;
in vec4 vNorm_WS;
in vec3 texCoord;
in vec3 barycentricCoords;
in vec3 largestDelta;

in vec4 vPos_CS;
in vec4 vNorm_CS;
in vec4 lightDir_CS;
in vec4 eyeDir_CS;

out vec4 color;

uniform uint minTexVal;
uniform uint maxTexVal;
uniform uint colorOrTexture;

// Draw modes :
//    - 0u : texture/cube/polygons only
//    - 1u : 0u, but with wireframe on top
//    - 2u : wireframe only, transparent
uniform uint drawMode;

uniform vec4 lightPos;
uniform usampler3D texData; // texture generated by the voxel grid generation
uniform sampler1D colorScale; // Color scale generated by the program

uniform vec3 sceneBBPosition;
uniform vec3 sceneBBDiagonal;
uniform vec3 voxelGridSize;
uniform vec3 planePositions;

/// Takes a uvec3 of an R8UI-based texture and spits out an RGB color by converting
/// from R(uchar)G(void)B(void) to HSV first, then to RGB
vec4 R8UIToRGB(in uvec3 ucolor);

// Takes a uvec3 of an R8UI-based texture and spits out an RGB color by looking up the color scale
vec4 R8UItoColorScale(in uvec3 ucolor);
// Function alternating between the color scale and HSV2RGB texture output from user input.
vec4 R8UIConversion(in uvec3 ucolor);
// Get a plane's coordinate in its axis.
float planeIdxToPlanePosition(int id);

void main(void)
{
	// Compute the cutting plane position so that we can threshold the fragments :
	if (vPos_WS.x < planeIdxToPlanePosition(1)) { discard; } // Early discards for
	if (vPos_WS.y < planeIdxToPlanePosition(2)) { discard; } // the parts of the grid
	if (vPos_WS.z < planeIdxToPlanePosition(3)) { discard; } // behind the planes

	float epsilon = .03;
	float distMin = min(barycentricCoords.x/largestDelta.x, min(barycentricCoords.y/largestDelta.y, barycentricCoords.z/largestDelta.z));

	vec4 basecolor;
	uvec3 ui = texture(texData, texCoord).rgb; // color, as R(uchar)G(void)B(void)
	// If we're in the area of a primitive where wireframe is NOT shown :
	if (distMin > epsilon) {
		basecolor = R8UIConversion(ui);
		// If we asked for wireframe only, show nothing (alpha=.0)
		if (drawMode == 2) {
			basecolor = vec4(.3, .3, .3, .0);
		}
	}
	// If we're in the area of a primitive where wireframe IS shown :
	else {
		// If asked to do wireframe only, set basecolor to grey only, if wireframe+texture, have a
		// stripe of white surrounding the wireframe (better contrast), if texture only, show it :
		float colorRatio = (drawMode == 2u) ? (.3) : (1. - ((distMin/epsilon < .33 || distMin/epsilon > .66) ? 1. : .0));
		basecolor = (drawMode == 0u) ? R8UIConversion(ui) : vec4(colorRatio, colorRatio, colorRatio, 1.);
	}

	color = basecolor;
	//color = vNorm_WS; // debug

	if (basecolor.a < 0.1) { discard; } // if transparent, discard the fragment to show others behind it
}

vec4 R8UIToRGB(in uvec3 ucolor) {
	if (ucolor.r < minTexVal) { return vec4(.0, .0, .0, 1.); }
	if (ucolor.r > maxTexVal) { return vec4(1., 1., 1., 1.); }
	float a = float(minTexVal) / 255.f;
	float b = float(maxTexVal) / 255.f;
	float c = 50.f / 255.f;
	float d = 200.f / 255.f;
	// Get the red component in floating point :
	float r = 1.f - ((b - a) / (d - c)) * ((float(ucolor.r)/255.f)-c)+a;
	// Convert to HSV space (from glsl-hsv2rgb on github) :
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(vec3(r,r,r) + K.xyz) * 6.0 - K.www);
	vec3 rgb = mix(K.xxx, clamp(p - K.xxx, .1, .7), r); // change min/max vals of clamp() to change saturation
	return vec4(rgb.r, rgb.g, rgb.b, 1.0);
}

vec4 R8UItoColorScale(in uvec3 ucolor) {
	if (ucolor.r < minTexVal) { return vec4(.0, .0, .0, 1.); }
	if (ucolor.r > maxTexVal) { return vec4(1., 1., 1., 1.); }
	// Only the red component contains the data needed for the color scale :
	float index = float(ucolor.r)/255.;
	vec4 color = texture(colorScale, index);
	color.a = 1.f;
	return color;
}

vec4 R8UIConversion(in uvec3 ucolor) {
	if (colorOrTexture > 0) { return R8UIToRGB(ucolor); }
	return R8UItoColorScale(ucolor);
}

float planeIdxToPlanePosition(int id) {
	// displacement to apply :
	vec3 diff = planePositions - sceneBBPosition;
	if (id == 1) { return diff.x; }
	if (id == 2) { return diff.y; }
	if (id == 3) { return diff.z; }
	return 0.f;
}
