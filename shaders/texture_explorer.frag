#version 400 core

#extension GL_ARB_separate_shader_objects : enable

/****************************************/
/**************** Inputs ****************/
/****************************************/
layout(location = 0) in vec4 vPos;		// The vertex's positions
layout(location = 1) in vec3 vOriginalCoords;	// The vertex's normal
layout(location = 2) in vec3 vTexCoords;	// The vertex's texture coordinates
layout(location = 3) in vec2 planeMultiplier;	// The multiplier used to 'stretch' the plane

/****************************************/
/*************** Outputs ****************/
/****************************************/
out vec4 color; // This fragment's color

/****************************************/
/*************** Uniforms ***************/
/****************************************/
uniform usampler3D texData;	// texture generated by the voxel grid generation
uniform sampler1D colorScale;	// Color scale generated by the program
uniform uint planeIndex;	// The identifier of the currently drawn plane.
uniform vec2 colorBounds;	// The min and max values displayed (minTexValue and maxTexValue in other shaders)
uniform vec2 textureBounds;	// The min and max values

uniform vec3 color0;
uniform vec3 color1;

uniform uint channelView;	// What channels do we visualize ? R+G = 1, R = 2, G = 3
uniform uint selectedChannel;	// The selected channel to visualize in greyscale mode
uniform uint nbChannels;	// nb of channels in the image (R, RG, RGB)
uniform double maxTexPossible;	// maximum tex value possible, variable depending on the data type

/****************************************/
/*********** Function headers ***********/
/****************************************/
vec4 planeIdxToColor(in uint idx);
bool shouldDiscard();
bool shouldDrawBorder();

vec4 voxelIdxToColor(in uvec3 colorParams, in mat3 colorSegment, in vec2 colorBounds, in uvec3 ucolor);

/****************************************/
/***************** Main *****************/
/****************************************/
void main() {
	if (shouldDiscard()) { if (!shouldDrawBorder()) { discard; } }

	uvec3 colorParams = uvec3(channelView, selectedChannel, nbChannels);
	mat3 colorSegment = mat3(color0, color1, vec3(.0));

	// Default color : plane color
	color = planeIdxToColor(planeIndex);

	// If in the border area, stop there :
	if (shouldDrawBorder()) { return; }

	color.xyz = vTexCoords;
	color.a = 1.f;
	// Apply the texture :
	color = voxelIdxToColor(colorParams, colorSegment, colorBounds, texture(texData, vTexCoords).rgb);
}

/****************************************/
/************** Functions ***************/
/****************************************/
vec4 planeIdxToColor(in uint idx) {
	if (idx == 1) { return vec4(1., .0, .0, 1.); }
	if (idx == 2) { return vec4(.0, 1., .0, 1.); }
	if (idx == 3) { return vec4(.0, .0, 1., 1.); }
	return vec4(.27, .27, .27, 1.);
}

bool shouldDiscard() {
	if (vTexCoords.x > 1. || vTexCoords.y > 1. || vTexCoords.z > 1.) { return true; }
	if (vTexCoords.x < 0. || vTexCoords.y < 0. || vTexCoords.z < 0.) { return true; }
	return false;
}

bool shouldDrawBorder() {
	// Create a border around the image (and try to scale border
	// 'lengths' so they're equal on all sides) :
	float min =-.99;
	float max = .99;
	float minx = min;
	float maxx = max;
	float miny = min;
	float maxy = max;
	if ((vOriginalCoords.x) > maxx || (vOriginalCoords.y) > maxy) { return true; }
	if ((vOriginalCoords.x) < minx || (vOriginalCoords.y) < miny) { return true; }
	return false;
}
