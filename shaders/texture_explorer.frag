#version 400 core

#extension GL_ARB_separate_shader_objects : enable

/****************************************/
/**************** Inputs ****************/
/****************************************/
layout(location = 0) in vec4 vPos;		// The vertex's positions
layout(location = 1) in vec3 vTexCoords;	// The vertex's texture coordinates

/****************************************/
/*************** Outputs ****************/
/****************************************/
out vec4 color; // This fragment's color

/****************************************/
/*************** Uniforms ***************/
/****************************************/
uniform usampler3D texData;	// texture generated by the voxel grid generation
uniform sampler1D colorScale;	// Color scale generated by the program
uniform uint planeIndex;	// The identifier of the currently drawn plane.
uniform vec2 colorBounds;	// The min and max values displayed (minTexValue and maxTexValue in other shaders)
uniform vec2 textureBounds;	// The min and max values

/****************************************/
/*********** Function headers ***********/
/****************************************/
vec4 voxelValueToColor(in uvec4 ucolor);

/****************************************/
/***************** Main *****************/
/****************************************/
void main() {
	if (vTexCoords.x > 1. || vTexCoords.y > 1. || vTexCoords.z > 1.) { discard; }
	if (vTexCoords.x < 0. || vTexCoords.y < 0. || vTexCoords.z < 0.) { discard; }
	color = voxelValueToColor(texture(texData, vTexCoords));
}

/****************************************/
/************** Functions ***************/
/****************************************/
vec4 voxelValueToColor(in uvec4 ucolor) {
	if (ucolor.r < textureBounds.x || ucolor.r > colorBounds.y) { discard; }
//	if (ucolor.g < textureBounds.x || ucolor.g > colorBounds.y) { discard; }
	// Have the R and G color channels clamped to the min/max of the scale
	// (mimics under or over-exposure)
	float color_r = clamp(float(ucolor.r), colorBounds.x, colorBounds.y);
	float color_g = clamp(float(ucolor.g), colorBounds.x, colorBounds.y);
	// Compute the color as Brian's paper describes it :
	float color_k = 2.5;
	float sc = colorBounds.y - colorBounds.x;
	float eosin = (color_r - colorBounds.x)/(sc);
	float dna = (color_g - colorBounds.x)/(sc); // B is on G channel because OpenGL only allows 2 channels upload to be RG, not RB

	float eosin_r_coef = 0.050;
	float eosin_g_coef = 1.000;
	float eosin_b_coef = 0.544;

	float hematoxylin_r_coef = 0.860;
	float hematoxylin_g_coef = 1.000;
	float hematoxylin_b_coef = 0.300;

	float r_coef = eosin_r_coef;
	float g_coef = eosin_g_coef;
	float b_coef = eosin_b_coef;

	return vec4(
		exp(-hematoxylin_r_coef * dna * color_k) * exp(-eosin_r_coef * eosin * color_k),
		exp(-hematoxylin_g_coef * dna * color_k) * exp(-eosin_g_coef * eosin * color_k),
		exp(-hematoxylin_b_coef * dna * color_k) * exp(-eosin_b_coef * eosin * color_k),
		1.
	);
}
