#version 400 core

#extension GL_ARB_separate_shader_objects : enable

/****************************************/
/**************** Inputs ****************/
/****************************************/
layout(location = 0) in vec4 vPos;		// The vertex's positions
layout(location = 1) in vec3 vTexCoords;	// The vertex's texture coordinates

/****************************************/
/*************** Outputs ****************/
/****************************************/
out vec4 color; // This fragment's color

/****************************************/
/*************** Uniforms ***************/
/****************************************/
uniform usampler3D texData;	// texture generated by the voxel grid generation
uniform sampler1D colorScale;	// Color scale generated by the program
uniform uint planeIndex;	// The identifier of the currently drawn plane.
uniform uvec2 colorBounds;	// The min and max values displayed (minTexValue and maxTexValue in other shaders)

/****************************************/
/*********** Function headers ***********/
/****************************************/
// Fetches the right color from the texture value given in argument.
vec4 texValueToColor(in uint value);

/****************************************/
/***************** Main *****************/
/****************************************/
void main() {
	if (vTexCoords.x > 1. || vTexCoords.y > 1. || vTexCoords.z > 1.) { discard; }
	if (vTexCoords.x < 0. || vTexCoords.y < 0. || vTexCoords.z < 0.) { discard; }
	color = texValueToColor(texture(texData, vTexCoords).r);
	// color = vec4(.0, .0, .0, 1.);
	// color.xyz = vTexCoords;
}

/****************************************/
/************** Functions ***************/
/****************************************/
vec4 texValueToColor(in uint value) {
	if (value < colorBounds.x) { return vec4(.0, .0, .0, 1.); }
	if (value > colorBounds.y) { return vec4(1., 1., 1., 1.); }
	return texture(colorScale, float(value)/255.f);
}

