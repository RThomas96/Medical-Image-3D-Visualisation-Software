CMAKE_MINIMUM_REQUIRED(VERSION 3.13)
PROJECT(visualisation)

# CMake Setup (compile_commands, debug mode check, and build directory check) {{{
IF(CMAKE_BINARY_DIR STREQUAL CMAKE_SOURCE_DIR)
        MESSAGE(FATAL_ERROR "Please select another Build Directory !")
ENDIF()

IF(WIN32 OR MINGW OR MSVC)
        MESSAGE(FATAL_ERROR "This project cannot be compiled on a Windows platform.")
ENDIF()

IF(CMAKE_BUILD_TYPE MATCHES Debug)
        MESSAGE("Currently compiling in Debug mode.")
	SET(GCC_COMPILE_FLAGS "-ggdb --pedantic")
	SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} ${GCC_COMPILE_FLAGS}")
ENDIF(CMAKE_BUILD_TYPE MATCHES Debug)

SET(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)
SET(CMAKE_CXX_STANDARD_REQUIRED TRUE)
SET(CMAKE_USE_RELATIVE_PATHS TRUE)
SET(CMAKE_AUTORCC ON)
SET(CMAKE_AUTOMOC ON)
SET(CMAKE_AUTOUIC ON)
SET(CMAKE_INCLUDE_CURRENT_DIR ON)

CMAKE_POLICY(SET CMP0072 OLD)

SET(Qt5_DIR "/usr/lib/cmake/Qt5/")

FIND_PACKAGE(Qt5 REQUIRED COMPONENTS Core Gui Widgets Multimedia)
FIND_PACKAGE(GLEW REQUIRED)
FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(glm REQUIRED)
# }}}

SET(INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORIES} ${OPENGL_INCLUDE_DIRS} ${GLEW_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}/lib)
INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES})

#SET_TARGET_PROPERTIES(qt_system PROPERTIES
#	LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}
#	ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}
#)

ADD_EXECUTABLE(visualisation
	./qt/include/main_window.hpp

	./main.cpp

	./qt/src/main_window.cpp
)
TARGET_LINK_LIBRARIES(visualisation
	PUBLIC Qt5::Core
	PUBLIC Qt5::Widgets
	PUBLIC Qt5::Gui
)

# vim: foldmethod=marker : foldmarker={{{,}}} : tabstop=8
