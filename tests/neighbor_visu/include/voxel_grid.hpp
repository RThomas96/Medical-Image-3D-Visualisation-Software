#ifndef TEST_NEIGHBOR_VISU_INCLUDE_VOXEL_GRID_HPP_
#define TEST_NEIGHBOR_VISU_INCLUDE_VOXEL_GRID_HPP_

#include "./bounding_box.hpp"
#include "./image_storage.hpp"
#include "./tetmesh.hpp"

#include <glm/glm.hpp>

#include <iostream>
#include <vector>
#include <memory>
#include <fstream>

/// @brief High precision vector3 type to store image sizes, and coordinates.
typedef glm::vec<3, std::size_t, glm::highp> svec3;

class VoxelGrid {

	public:
		/// @brief Default constructor of a voxel grid. Allocated nothing, set size to 0x0x0.
		VoxelGrid(void);

		/// @brief Sized constructor of a voxel grid.
		/// @details Allocates a vector large enough to accomodate for the whole dataset we
		/// are trying to fit in it.
		VoxelGrid(std::size_t width, std::size_t height, std::size_t depth);

		/// @brief Destructor of the voxel grid. Destroys all structures and frees up memory.
		~VoxelGrid(void);

		/// @brief Sets the dimensions in voxels of the grid. If the grid was already populated, this will remove any previously computed data.
		/// @return A reference to *this, to chain function calls.
		VoxelGrid& setGridResolution(svec3 newDimensions);

		/// @brief Sets the bounding box of the image to render.
		/// @details Will be used to define the render window of the voxel grid, as well as the voxel's size.
		VoxelGrid& setRenderBoundingBox(glm::vec4 minPoint, glm::vec4 maxPoint);

		/// @brief Set the shared pointer to an image stack, to be able to sample the grid.
		VoxelGrid& setImageStack(std::shared_ptr<TextureStorage> _stack);

		/// @brief Set the shared pointer to the inspector, to be able to navigate the grid.
		VoxelGrid& setInspector(std::shared_ptr<TetMesh> _mesh);

		/// @brief Iterates on each cell of the grid, and computes the grey value here.
		/// @details Renders a voxel grid of dimensions `gridDimensions` in the area
		/// defined by `renderBB`, with voxels of size `voxelDimensions`. The resulting
		/// voxel data is saved in `data`.
		VoxelGrid& populateGrid(void);

		/*

		friend class IGridWriter;

		/// @brief Writes the grid to a filepath provided.
		/// This function will write the grid to a file, using an IGridWriter pointer (IGridWriter is an interface class to write the grid in many forms).
		/// If the writer writes multiple files (in the case of a multiple image writer, as the Blue dataset is) then the `path` argument will be interpreted as a template for the name.
		/// For example, if the path given is path_filename.file_extension then the files will be named path_filename_FILENUMBER.file_extension.
		VoxelGrid& writeToFile(const IGridWriter* writer, const std::string path);
		*/

	protected:
		void reserveSpace(void); // Allocate the needed space for filling the data progressively.
		void computeData(void); // Compute te values to put in the grid
		void updateVoxelSizes(void); // Compute the size of voxels after renderBB or gridDimensions has changed.

	private:
		/// @brief Dimensions of the grid, in voxels or (pixels+stack depth), however you represent it.
		svec3 gridDimensions;
		/// @brief The coordinates of the axis-aligned bounding box surrounding the voxels area.
		BoundingBox_General<float> renderBB;
		/// @brief Dimensions of the voxels along the X, Y, and Z dimensions.
		glm::vec3 voxelDimensions;
		/// @brief The data generated by the voxel grid.
		std::vector<unsigned char> data;
		/// @brief Pointer to the texture stack
		std::shared_ptr<TextureStorage> imageStack;
		/// @brief Pointer to a mesh to explore the data
		std::shared_ptr<TetMesh> inspectorMesh;

		/*
		IGridWriter* defaultWriter; // Maybe for incrementally writing to a file ? could be good if the grid size > available memory
		*/
};

#endif // TEST_NEIGHBOR_VISU_INCLUDE_VOXEL_GRID_HPP_
