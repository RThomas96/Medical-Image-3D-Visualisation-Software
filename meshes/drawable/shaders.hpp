#ifndef VISUALISATION_SHADERS_HPP
#define VISUALISATION_SHADERS_HPP

#include <QOpenGLFunctions>
#include <QOpenGLFunctions_3_2_Compatibility>
#include <QOpenGLFunctions_3_2_Core>
#include <QOpenGLFunctions_4_0_Compatibility>
#include <QOpenGLFunctions_4_0_Core>
#include <QOpenGLVersionFunctions>

#include <algorithm>
#include <utility>

class ShaderCompiler {
public:
	typedef QOpenGLFunctions_3_2_Core GLFunctions;
	using PragmaReplacement = std::pair<std::string, std::string>;

public:
	ShaderCompiler(GLFunctions* functions);
	~ShaderCompiler();

public:
	/// @brief Returns the #pragma replacement strings in use by the program.
	const std::vector<PragmaReplacement>& pragmaReplacements() const;
	/// @brief Adds a pragma token which will be replaced by a string in the files read by the compiler.
	ShaderCompiler& pragmaReplacement_file(std::string pragma, std::string filename);
	/// @brief Adds a pragma token which will be replaced by the contents of a file in the files read by the compiler.
	ShaderCompiler& pragmaReplacement_text(std::string pragma, std::string replacement);

	/// @brief Returns the vertex shader handle.
	const GLuint vertexShader() const;
	/// @brief Adds the given file as the contents of the vertex shader.
	ShaderCompiler& vertexShader_file(const std::string& _vshader_file);

	/// @brief Returns the geometry shader handle.
	const GLuint geometryShader() const;
	/// @brief Adds the given file as the contents of the geometry shader.
	ShaderCompiler& geometryShader_file(const std::string& _gshader_file);

	/// @brief Returns the fragment shader handle.
	const GLuint fragmentShader() const;
	/// @brief Adds the given file as the contents of the fragment shader.
	ShaderCompiler& fragmentShader_file(const std::string& _fshader_file);

	/// @brief Attempts to compile and link the program.
	bool compileShaders();

	/// @brief Returns the program name that was previously compiled with the given shaders.
	GLuint programName() const;

	/// @brief Checks if there are any errors in the linking process.
	bool hasError() const;
	/// @brief Returns the error string generated by the current configuration of the program.
	std::string errorString() const;

	/// @brief Resets the shader compiler.
	void reset();

protected:
	/// @brief Reads a file's contents.
	std::string parse_file(std::string filename);
	/// @brief Returns the corresponding replacement string for the given pragma token.
	std::string token_to_replacement(std::string pragma_token);
	/// @brief Compile a shader of a given type
	GLuint compile_shader(std::string contents, GLuint type);

protected:
	/// @brief GL functions.
	GLFunctions* gl;

	/// @brief The contents of the vertex shader
	std::string vshader_contents;
	/// @brief The contents of the geometry shader
	std::string gshader_contents;
	/// @brief The contents of the fragment shader
	std::string fshader_contents;

	/// @brief The compiled vertex shader handle.
	GLuint vshader_handle;
	/// @brief The compiled geometry shader handle.
	GLuint gshader_handle;
	/// @brief The compiled fragment shader handle.
	GLuint fshader_handle;

	/// @brief Final program handle.
	GLuint program_handle;

	/// @brief Error text generated by the compilation and linking process.
	std::string error_text;

	/// @brief Pragma replacements for the program
	std::vector<PragmaReplacement> pragma_replacements;
};

#endif	  // VISUALISATION_SHADERS_HPP
